{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "view-magnifier",
  "type": "registry:component",
  "title": "View Magnifier",
  "author": "bucharitesh <contact@bucharitesh.in>",
  "description": "A view magnifier component for Next.js apps with next-themes and Tailwind CSS, supporting system, light, and dark modes.",
  "registryDependencies": [
    "@bucharitesh/utils"
  ],
  "files": [
    {
      "path": "registry/default/bucharitesh/view-magnifier/view-magnifier.tsx",
      "content": "\"use client\";\n\nimport React, { useState, useCallback, useRef, useEffect } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { motion, useMotionValue, useTransform, animate } from \"motion/react\";\n\ninterface ViewMagnifierProps {\n  children: React.ReactNode;\n  className?: string;\n  maxScale?: number;\n  onScaleChange?: (isActive: boolean) => void;\n  onMaxScaleReached?: (isAtMax: boolean) => void;\n}\n\nconst ViewMagnifier: React.FC<ViewMagnifierProps> = ({\n  className,\n  children,\n  maxScale = 1.8,\n  onScaleChange,\n  onMaxScaleReached,\n  ...props\n}) => {\n  const [isMouseDown, setIsMouseDown] = useState<boolean>(false);\n  const [zoomLevel, setZoomLevel] = useState<number>(100);\n  const [isAtMaxScale, setIsAtMaxScale] = useState<boolean>(false);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const startX = useRef<number>(0);\n  const initialScale = useRef<number>(1);\n  const scale = useMotionValue(1);\n  const opacity = useTransform(scale, [1, maxScale], [0, 1]);\n  const containerScale = useTransform(scale, [1, maxScale], [1, 1.6]);\n\n  // Monitor scale changes for max scale callback\n  useEffect(() => {\n    const unsubscribe = scale.on(\"change\", (latestScale) => {\n      const newIsAtMaxScale = Math.abs(latestScale - maxScale) < 0.01;\n      if (newIsAtMaxScale !== isAtMaxScale) {\n        setIsAtMaxScale(newIsAtMaxScale);\n        onMaxScaleReached?.(newIsAtMaxScale);\n      }\n    });\n\n    return () => unsubscribe();\n  }, [scale, maxScale, isAtMaxScale, onMaxScaleReached]);\n\n  const handleZoomAnimation = useCallback(\n    (targetScale: number) => {\n      animate(scale, targetScale, {\n        type: \"spring\",\n        stiffness: 400,\n        damping: 30,\n        onUpdate: (latest) => setZoomLevel(Math.round(latest * 100)),\n      });\n    },\n    [scale],\n  );\n\n  const handlePointerDown = useCallback(\n    (e: React.PointerEvent<HTMLButtonElement>): void => {\n      setIsMouseDown(true);\n      startX.current = e.clientX;\n      initialScale.current = scale.get();\n      e.currentTarget.setPointerCapture(e.pointerId);\n      onScaleChange?.(true);\n    },\n    [scale, onScaleChange],\n  );\n\n  const handlePointerUp = useCallback(\n    (e: React.PointerEvent<HTMLButtonElement>): void => {\n      if (isMouseDown) {\n        setIsMouseDown(false);\n        handleZoomAnimation(1);\n        e.currentTarget.releasePointerCapture(e.pointerId);\n        onScaleChange?.(false);\n      }\n    },\n    [isMouseDown, handleZoomAnimation, onScaleChange],\n  );\n\n  const handlePointerMove = useCallback(\n    (e: React.PointerEvent<HTMLButtonElement>): void => {\n      if (!isMouseDown) return;\n\n      const deltaX = e.clientX - startX.current;\n      const scaleChange = deltaX * 0.005;\n      const newScale = Math.max(\n        0.8,\n        Math.min(maxScale, initialScale.current + scaleChange),\n      );\n\n      scale.set(newScale);\n      setZoomLevel(Math.round(newScale * 100));\n    },\n    [isMouseDown, maxScale, scale],\n  );\n\n  return (\n    <div ref={containerRef} className=\"outline-hidden z-40\" {...props}>\n      <motion.div\n        className={cn(\n          \"fixed h-screen w-screen outline-hidden inset-0 pointer-events-none backdrop-blur-xl\",\n          \"after:content-[''] after:rounded-[inherit] after:w-full after:h-full after:inset-0\",\n          \"after:absolute after:pointer-events-none dark:after:block\",\n          \"dark:after:shadow-[inset_0_0_0_1px_hsla(0,0%,100%,0.2)]\",\n        )}\n        style={{ opacity }}\n        aria-hidden=\"true\"\n      />\n\n      <motion.div\n        className={cn(\n          \"relative left-1/2 right-1/2 w-full h-auto overflow-visible my-3\",\n          \"z-60 rounded-2xl\",\n          \"transform lg:transform-none\",\n          className,\n        )}\n        style={{\n          scale: containerScale,\n          translateX: \"-50%\",\n          translateZ: \"0px\",\n        }}\n        role=\"img\"\n        aria-label={`Content at zoom level ${zoomLevel}%`}\n      >\n        <div className=\"relative w-full h-full rounded-2xl overflow-hidden\">\n          {children}\n        </div>\n\n        <motion.div\n          style={{ opacity }}\n          className=\"w-full h-full absolute rounded-[inherit] inset-0 shadow-[0px_1px_1px_0px_rgba(0,0,0,0.02),0px_16px_24px_-4px_rgba(0,0,0,0.04),0px_32px_48px_-8px_rgba(0,0,0,0.06)]\"\n          aria-hidden=\"true\"\n        />\n\n        <motion.button\n          onPointerDown={handlePointerDown}\n          onPointerUp={handlePointerUp}\n          onPointerMove={handlePointerMove}\n          onPointerLeave={handlePointerUp}\n          style={{\n            scale: containerScale,\n            translateY: \"-50%\",\n            translateZ: \"0px\",\n          }}\n          aria-label={`Drag to zoom. Current zoom level: ${zoomLevel}%`}\n          aria-valuemin={80}\n          aria-valuemax={180}\n          aria-valuenow={zoomLevel}\n          role=\"slider\"\n          className={cn(\n            \"absolute top-1/2 -right-6\",\n            \"w-1 h-14 rounded-full\",\n            \"bg-gray-400 dark:bg-gray-600\",\n            \"hover:bg-gray-500 dark:hover:bg-gray-500\",\n            \"transition-colors duration-300\",\n            \"focus-visible:outline-hidden focus-visible:ring-2\",\n            \"focus-visible:ring-gray-400 dark:focus-visible:ring-gray-500\",\n            \"focus-visible:ring-offset-2\",\n            \"focus-visible:ring-offset-white dark:focus-visible:ring-offset-gray-900\",\n            \"md:block hidden\",\n            isMouseDown ? \"cursor-grabbing\" : \"cursor-grab\",\n            \"after:content-[''] after:absolute after:w-4 after:h-full after:-left-2 after:top-0\",\n          )}\n          touch-action=\"none\"\n        />\n      </motion.div>\n    </div>\n  );\n};\n\nexport default ViewMagnifier;\n",
      "type": "registry:component"
    }
  ],
  "docs": "https://bucharitesh.in/craft/view-magnifier"
}