import { promises as fs } from 'node:fs';
import path from 'node:path';

import { rimraf } from 'rimraf';
import { type Registry, registrySchema } from 'shadcn/schema';

import { registryConfig } from '../config/registry';
import { registry } from '../registry';

const REGISTRY_PATH = path.join(process.cwd(), '__registry__');
const PUBLIC_REGISTRY_PATH = path.join(process.cwd(), 'public/r');

/**
 * Build src/__registry__/registry.autogenerated.json, src/__registry__/index.tsx
 * Thanks @shadcn/ui
 */
export async function buildRegistry(registry: Registry) {
  let index = `/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable @typescript-eslint/no-explicit-any */
// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.

import React from "react";

export const Index: Record<string, any> = {`;
  for (const item of registry.items) {
    if (!Array.isArray(item.files) || !item.files?.length) {
      continue;
    }

    // Determine the correct component path based on item type and file path
    let componentPath: any;
    if (item.files[0].path.startsWith('examples/')) {
      componentPath = `@/registry/default/example/${item.files[0].path.replace('examples/', '')}`;
    } else if (item.files[0].path.startsWith('lib/')) {
      componentPath = `@/registry/default/lib/${item.files[0].path.replace('lib/', '')}`;
    } else {
      componentPath = `@/registry/default/bucharitesh/${item.files[0].path}`;
    }

    index += `
  "${item.name}": {
    name: "${item.name}",
    description: "${item.description ?? ''}",
    type: "${item.type}",
    files: [${item.files.map((file) => {
      let filePath: any;
      if (file.path.startsWith('examples/')) {
        filePath = `registry/default/example/${file.path.replace('examples/', '')}`;
      } else if (file.path.startsWith('lib/')) {
        filePath = `registry/default/lib/${file.path.replace('lib/', '')}`;
      } else {
        filePath = `registry/default/bucharitesh/${file.path}`;
      }
      return `{
      path: "${filePath}",
      type: "${file.type}",
    }`;
    })}],${
      item.type === 'registry:example'
        ? `
    component: React.lazy(() => import("${componentPath}")),`
        : ''
    }
  },`;
  }

  index += `
}`;

  // Build /src/__registry__/registry.autogenerated.json
  let registryJSON = JSON.stringify(
    {
      $schema: 'https://ui.shadcn.com/schema/registry.json',
      name: 'bucharitesh',
      homepage: 'https://bucharitesh.in/craft',
      items: registry.items
        .filter((item) => item.type !== 'registry:example')
        .map((item) => {
          return {
            ...item,
            files:
              item.files?.map((file) => {
                if (file.path.startsWith('registry/')) {
                  return file;
                }

                // Handle different file path patterns
                if (file.path.startsWith('examples/')) {
                  return {
                    ...file,
                    path: `registry/default/example/${file.path.replace('examples/', '')}`,
                  };
                }
                if (file.path.startsWith('lib/')) {
                  return {
                    ...file,
                    path: `registry/default/lib/${file.path.replace('lib/', '')}`,
                  };
                }
                return {
                  ...file,
                  path: `registry/default/bucharitesh/${file.path}`,
                };
              }) ?? [],
          };
        }),
    },
    null,
    2
  );

  const registryBaseUrl = registryConfig.baseUrl;
  const registryBaseUrlRegex = /<registryBaseUrl>/g;
  registryJSON = registryJSON.replace(registryBaseUrlRegex, registryBaseUrl);

  rimraf.sync(path.join(REGISTRY_PATH, 'registry.autogenerated.json'));
  await fs.writeFile(
    path.join(REGISTRY_PATH, 'registry.autogenerated.json'),
    registryJSON,
    'utf8'
  );

  // Build public registry
  rimraf.sync(path.join(PUBLIC_REGISTRY_PATH, 'registry.json'));
  await fs.writeFile(
    path.join(PUBLIC_REGISTRY_PATH, 'registry.json'),
    registryJSON,
    'utf8'
  );

  // Build /src/__registry__/index.tsx
  rimraf.sync(path.join(REGISTRY_PATH, 'index.tsx'));
  await fs.writeFile(path.join(REGISTRY_PATH, 'index.tsx'), index, 'utf8');
}

try {
  console.log('ðŸ’½ Building registry...');

  const result = registrySchema.safeParse(registry);

  if (!result.success) {
    console.error(result.error);
    process.exit(1);
  }

  await buildRegistry(result.data);

  console.log('âœ… Done!');
} catch (error) {
  console.error(error);
  process.exit(1);
}
